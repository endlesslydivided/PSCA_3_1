{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,iCAAqC;AACrC,6BAA6B;AAC7B,6BAAwC;AAExC,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,sBAAsB,EAAE;QACzB,IAAM,OAAO,GAAG,aAAK,CAAC;YACpB,gCAAgC;YAChC,aAAa;YACb,aAAa;YACb,aAAa;SACd,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAEb,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;SAChC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE;QACtC,IAAM,OAAO,GAAG,aAAK,CAAC;YACpB,aAAa;YACb,aAAa;YACb,aAAa;SACd,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAEb,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;SAChC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mBAAmB,EAAE,UAAC,IAAI;QAC3B,IAAM,MAAM,GAAG,mBAAY,CAAC,UAAC,GAAG,EAAE,GAAG;YACnC,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;YACjD,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAQ,CAAC,CAAA;YACrD,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE;YACrB,UAAG,CAAC,mBAAmB,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,UAAC,GAAG;gBACnD,IAAM,OAAO,GAAG,YAAI,CAAC,GAAG,CAAC,CAAA;gBAEzB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;oBACnB,aAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;oBAC5D,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;gBAChE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,aAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;oBAC5D,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;gBAC1D,CAAC;gBAED,MAAM,CAAC,KAAK,EAAE,CAAA;gBAEd,MAAM,CAAC,IAAI,EAAE,CAAA;YACf,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IAClB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { parse, http } from './index'\nimport { expect } from 'chai'\nimport { get, createServer } from 'http'\n\ndescribe('get headers', () => {\n  it('should parse headers', () => {\n    const headers = parse([\n      'Content-Type: application/json',\n      'Cookie: foo',\n      'Cookie: bar',\n      'Cookie: baz'\n    ].join('\\n'))\n\n    expect(headers).to.deep.equal({\n      'Content-Type': 'application/json',\n      'Cookie': ['foo', 'bar', 'baz']\n    })\n  })\n\n  it('should use consistent header case', () => {\n    const headers = parse([\n      'cOOkIE: foo',\n      'cookie: bar',\n      'Cookie: baz'\n    ].join('\\n'))\n\n    expect(headers).to.deep.equal({\n      'Cookie': ['foo', 'bar', 'baz']\n    })\n  })\n\n  it('should parse http', (done) => {\n    const server = createServer((req, res) => {\n      res.setHeader('Content-Type', 'application/json')\n      res.setHeader('Cookie', ['foo', 'bar', 'baz'] as any)\n      res.end('hello world')\n    })\n\n    server.on('listening', () => {\n      get('http://localhost:' + server.address().port, (res) => {\n        const headers = http(res)\n\n        if (res.rawHeaders) {\n          expect(headers['Content-Type']).to.equal('application/json')\n          expect(headers['Cookie']).to.deep.equal(['foo', 'bar', 'baz'])\n        } else {\n          expect(headers['content-type']).to.equal('application/json')\n          expect(headers['cookie']).to.deep.equal('foo, bar, baz')\n        }\n\n        server.close()\n\n        return done()\n      })\n    })\n\n    server.listen(0)\n  })\n})\n"]}